# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import worker, changes, schedulers, util, steps, reporters
from buildbot.process import results
from buildbot.www import auth
from datetime import timedelta
from twisted.internet import defer

import configparser
import pathlib
import re


class ReactOSLDAPUserInfoProvider(auth.UserInfoProviderBase):
    def getUserInfo(self, username):
        # ReactOSLDAPAuth already checks for group membership, so every logged in user can be added to the 'logged_in_developer' group.
        return defer.succeed({
            'userName': username,
            'email': username,
            'groups': ['logged_in_developer'],
        })

class ReactOSLDAPAuth(auth.CustomAuth):
    def __init__(self):
        super().__init__()
        self.userInfoProvider = ReactOSLDAPUserInfoProvider()

        global credentials
        self.url = credentials.get("ldap", "url")
        self.basedn = credentials.get("ldap", "basedn")
        self.binddn = credentials.get("ldap", "binddn")
        self.passwd = credentials.get("ldap", "passwd")
        self.search = credentials.get("ldap", "search")

    def check_credentials(self, user, password):
        import ldap

        user = user.decode('utf-8')
        password = password.decode('utf-8')

        try:
            res = self._authenticate(user, password)
        except ldap.LDAPError as e:
            print('ReactOSLDAPAuth: LDAPError: ' + str(e))
            res = False

        return res

    def _authenticate(self, user, password):
        import ldap

        search_conn = ldap.initialize(self.url)
        search_conn.simple_bind_s(self.binddn, self.passwd)

        try:
            result = search_conn.search_s(self.basedn, ldap.SCOPE_SUBTREE, self.search % user, ['objectclass'], 1)
        except ldap.SERVER_DOWN:
            print('ReactOSLDAPAuth: LDAP server seems down')
            return False

        search_conn.unbind()

        # Make sure we found a single user in the LDAP DB
        if not result or len(result) != 1:
            print('ReactOSLDAPAuth: User "%s" not found in LDAP DB' % user)
            return False

        auth_conn = ldap.initialize(self.url)
        ldap_dn = result[0][0]

        # Authenticate the user
        try:
            auth_conn.simple_bind_s(ldap_dn, password)
        except ldap.INVALID_CREDENTIALS:
            print('ReactOSLDAPAuth: Invalid credentials for user "%s"' % user)
            return False

        auth_conn.unbind()
        return True


# References:
# - https://kilabit.info/journal/2017/07/Integrating_Buildbot_and_Mattermost
# - https://github.com/shuLhan/mattermost-integration/blob/master/buildbot/mattermost_reporter.py
def mattermost_formatter(build):
    mm_payload = {}

    if not build['complete']:
        return mm_payload

    mm_payload['username'] = 'BuildBot'

    if build['results'] == results.SUCCESS or build['results'] == results.WARNINGS:
        icon = ':white_check_mark:'
    else:
        icon = ':x:'

    mm_payload['text'] = 'Build #%u of %s is complete: %s %s (%s)' % (
        build['number'],
        build['builder']['name'],
        icon,
        results.Results[build['results']],
        build['url']
    )

    return mm_payload


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None

# Always build all revisions
c['collapseRequests'] = False

# Read the config
credentials = configparser.RawConfigParser()
if len(credentials.read("credentials.ini")) == 0:
    raise Exception("credentials.ini not found or empty!")

####### WORKERS

c['workers'] = [
    worker.Worker('AHK-Bot', credentials.get("workers", "AHK-Bot_passwd")),
    worker.Worker('Fezile', credentials.get("workers", "Fezile_passwd")),
    worker.Worker('Carrier', credentials.get("workers", "Carrier_passwd")),
    worker.Worker('Carrier-WHS-Bot', credentials.get("workers", "Carrier-WHS-Bot_passwd")),
    worker.Worker('Carrier-Win2003-x64', credentials.get("workers", "Carrier-Win2003-x64_passwd")),
    worker.Worker('Carrier-Win7', credentials.get("workers", "Carrier-Win7_passwd")),
    worker.Worker('Testee', credentials.get("workers", "Testee_passwd")),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = changes.PBChangeSource(port=9990)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch='refs/heads/master'),
    treeStableTimer=None,
    builderNames=["Build GCCLin_x86", "Build MSVC_x86", "Build MSVC_x64"]))
    #builderNames=["Build GCCLin_x86", "Build MSVC_x86", "Build MSVC_x64", "Test KVM AHK"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="rostests",
    change_filter=util.ChangeFilter(branch='refs/heads/master', category='rostests'),
    treeStableTimer=None,
    builderNames=["Test WHS"]))

c['schedulers'].append(schedulers.Triggerable(
    name="Carrier Testbot Trigger",
    builderNames=["Test KVM", "Test VBox"]))
    #builderNames=["Test KVM", "Test VMW", "Test VMW Hybrid", "Test VBox"]))

c['schedulers'].append(schedulers.Triggerable(
    name="Carrier Testbot-x64 Trigger",
    builderNames=["Test KVM_x64"]))

c['schedulers'].append(schedulers.Triggerable(
    name="Carrier-Win2003-x64 Testbot Trigger",
    builderNames=["Test Win2003_x64"]))

c['schedulers'].append(schedulers.Periodic(
    name="Daily",
    builderNames=["Build GCCLin_x86 Release", "Build GCCWin_x86"],
    periodicBuildTimer=24*60*60))

c['schedulers'].append(schedulers.ForceScheduler(
    name="Force",
    reason=util.StringParameter(name="reason", required=True, label="Reason:", default="A reason for running this build, e.g. a corresponding JIRA Issue ID"),
    codebases=[util.CodebaseParameter("", repository=None, project=None)],
    properties=[util.NestedParameter("", fields=[
        util.StringParameter(name="id", label="JIRA Patch ID:")
    ])],
    builderNames=["Build GCCLin_x86", "Build GCCWin_x86", "Build MSVC_x86", "Build MSVC_x64", "Test WHS"]))
    #builderNames=["Build GCCLin_x86", "Build GCCWin_x86", "Build MSVC_x86", "Build MSVC_x64", "Test KVM AHK", "Test WHS"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

scripts_root = "../../"

bs_git = steps.Git(repourl='https://github.com/reactos/reactos.git', mode='full')
bs_clean = steps.ShellCommand(name="clean", command=["bash", scripts_root + "clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True)
bs_prepare_source = steps.ShellCommand(name="prepare_source", command=["bash", scripts_root + "prepare_source", util.WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True)
bs_bootcd = steps.Compile(name="bootcd", command=["bash", scripts_root + "build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"])
bs_livecd = steps.Compile(name="livecd", command=["bash", scripts_root + "build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"])
bs_upload_iso = steps.ShellCommand(name="uploadiso", command=["bash", scripts_root + "uploadiso"], description=["uploading"], descriptionDone=["uploaded"])
bs_submit_results = steps.ShellCommand(name="submit_results", command=["bash", scripts_root + "submit_result", util.WithProperties('%(buildnumber)s'), util.WithProperties('%(reason:-)s'), util.WithProperties('%(id:-)s')], description=["submitting results"], descriptionDone=["submit results"])

compiler_re = re.compile("\-\- The C compiler identification is (GNU|MSVC) ([\.\d]+)")
build_type_re = re.compile("\-\- Build Type\: (Debug|Release)")

def extract_build_props(rc, stdout, stderr):
    compiler = compiler_re.search(stdout)

    ret = {'compiler': None, 'compiler_version': None, 'build_type': 'Debug'}
    if compiler:
        ret['compiler'] = compiler.group(1)
        ret['compiler_version'] = compiler.group(2)

    bt = build_type_re.search(stdout)
    if bt:
        ret['build_type'] = bt.group(1)
    return ret

# parameters are based on "steps.Configure" build step
def make_bs_configure(*args):
    cmd = ["bash", scripts_root + "configure"] + list(args)

    return steps.SetPropertyFromCommand(
        name="configure",
        haltOnFailure=True,
        flunkOnFailure=True,
        command=cmd,
        description=["configuring"],
        descriptionDone=["configure"],
        extract_fn=extract_build_props
    )

Build_GCCLin_x86 = util.BuildFactory();
Build_GCCLin_x86.addStep(bs_clean)
Build_GCCLin_x86.addStep(bs_git)
Build_GCCLin_x86.addStep(bs_prepare_source)
Build_GCCLin_x86.addStep(make_bs_configure())
Build_GCCLin_x86.addStep(bs_bootcd)
Build_GCCLin_x86.addStep(bs_livecd)
Build_GCCLin_x86.addStep(steps.Compile(name="regtestcd", command=["bash", scripts_root + "regtestcd", "-DENABLE_ROSTESTS=1"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["TestCD"], descriptionDone=["TestCD"]))
Build_GCCLin_x86.addStep(steps.SetPropertyFromCommand(command=["bash", scripts_root + "get_suffix"], property="suffix"))
Build_GCCLin_x86.addStep(steps.Trigger(schedulerNames=['Carrier Testbot Trigger'], waitForFinish=False, copy_properties=['got_revision', 'id', 'owners', 'reason', 'suffix']))
Build_GCCLin_x86.addStep(bs_upload_iso)

Build_GCCLin_x86_Release = util.BuildFactory();
Build_GCCLin_x86_Release.addStep(bs_clean)
Build_GCCLin_x86_Release.addStep(bs_git)
Build_GCCLin_x86_Release.addStep(bs_prepare_source)
Build_GCCLin_x86_Release.addStep(make_bs_configure("-DCMAKE_BUILD_TYPE=Release"))
Build_GCCLin_x86_Release.addStep(bs_bootcd)
Build_GCCLin_x86_Release.addStep(bs_livecd)
Build_GCCLin_x86_Release.addStep(bs_upload_iso)

Build_GCCWin_x86 = util.BuildFactory();
Build_GCCWin_x86.addStep(bs_clean)
Build_GCCWin_x86.addStep(bs_git)
Build_GCCWin_x86.addStep(bs_prepare_source)
Build_GCCWin_x86.addStep(make_bs_configure("-DENABLE_ROSAPPS=1", "-DENABLE_ROSTESTS=1"))
Build_GCCWin_x86.addStep(bs_bootcd)
Build_GCCWin_x86.addStep(bs_livecd)

Build_MSVC_x86 = util.BuildFactory();
Build_MSVC_x86.addStep(bs_clean)
Build_MSVC_x86.addStep(bs_git)
Build_MSVC_x86.addStep(bs_prepare_source)
Build_MSVC_x86.addStep(make_bs_configure())
Build_MSVC_x86.addStep(bs_bootcd)
Build_MSVC_x86.addStep(bs_livecd)
Build_MSVC_x86.addStep(bs_upload_iso)

Build_MSVC_x64 = util.BuildFactory();
Build_MSVC_x64.addStep(bs_clean)
Build_MSVC_x64.addStep(bs_git)
Build_MSVC_x64.addStep(bs_prepare_source)
Build_MSVC_x64.addStep(make_bs_configure())
Build_MSVC_x64.addStep(bs_bootcd)
Build_MSVC_x64.addStep(bs_livecd)
Build_MSVC_x64.addStep(steps.Compile(name="rostests", command=["bash", scripts_root + "build_rostests"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["rostests"], descriptionDone=["rostests"]))
Build_MSVC_x64.addStep(steps.SetPropertyFromCommand(command=["bash", scripts_root + "get_suffix"], property="suffix"))
Build_MSVC_x64.addStep(steps.Trigger(schedulerNames=['Carrier-Win2003-x64 Testbot Trigger'], waitForFinish=False, copy_properties=['got_revision', 'id', 'owners', 'reason', 'suffix']))
Build_MSVC_x64.addStep(steps.Compile(name="regtestcd", command=["bash", scripts_root + "regtestcd", "-DENABLE_ROSTESTS:BOOL=TRUE", "-D_WINKD_:BOOL=FALSE", "-DKDBG:BOOL=TRUE"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["TestCD"], descriptionDone=["TestCD"]))
Build_MSVC_x64.addStep(steps.Trigger(schedulerNames=['Carrier Testbot-x64 Trigger'], waitForFinish=False, copy_properties=['got_revision', 'id', 'owners', 'reason', 'suffix']))
Build_MSVC_x64.addStep(bs_upload_iso)

Test_KVM = util.BuildFactory();
Test_KVM.addStep(steps.Compile(name="test", command=["sudo", scripts_root + "regtest", util.WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_KVM.addStep(bs_submit_results)

Test_KVM_x64 = util.BuildFactory();
Test_KVM_x64.addStep(steps.Compile(name="test", command=["sudo", scripts_root + "regtest", util.WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_KVM_x64.addStep(bs_submit_results)

Test_KVM_AHK = util.BuildFactory();
Test_KVM_AHK.addStep(bs_clean)
Test_KVM_AHK.addStep(bs_git)
Test_KVM_AHK.addStep(steps.ShellCommand(name="prepare ahk", command=["bash", scripts_root + "prepare_ahk"], description=["preparing ahk"], descriptionDone=["prepared ahk"], haltOnFailure=True))
Test_KVM_AHK.addStep(bs_prepare_source)
Test_KVM_AHK.addStep(steps.ShellCommand(name="compile ahk", command=["bash", "modules/AHK_Tests/compile.sh"], description=["compiling ahk"], descriptionDone=["compiled ahk"], haltOnFailure=True))
Test_KVM_AHK.addStep(steps.Compile(name="regtestcd", command=["bash", scripts_root + "regtestcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["TestCD"], descriptionDone=["TestCD"]))
Test_KVM_AHK.addStep(steps.Compile(name="test", command=["sudo", scripts_root + "regtest", util.WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_KVM_AHK.addStep(bs_submit_results)

Test_VBox = util.BuildFactory();
Test_VBox.addStep(steps.ShellCommand(name="vbox_clean", command=["bash", scripts_root + "vbox_clean"], description=["cleaning VirtualBox"], descriptionDone=["cleaned VirtualBox"], haltOnFailure=True))
Test_VBox.addStep(steps.Compile(name="test", command=["bash", scripts_root + "regtest", util.WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_VBox.addStep(bs_submit_results)

#Test_VMW = util.BuildFactory();
#Test_VMW.addStep(steps.ShellCommand(name="vmware_clean", command=["bash", scripts_root + "vmware_clean"], description=["cleaning VMware"], descriptionDone=["cleaned VMware"], haltOnFailure=True))
#Test_VMW.addStep(bs_regtest)
#Test_VMW.addStep(bs_submit_results)

#Test_VMW_Hybrid = util.BuildFactory();
#Test_VMW_Hybrid.addStep(steps.ShellCommand(name="vmware_clean", command=["bash", scripts_root + "vmware_clean"], description=["cleaning VMware"], descriptionDone=["cleaned VMware"], haltOnFailure=True))
#Test_VMW_Hybrid.addStep(bs_regtest)
#Test_VMW_Hybrid.addStep(bs_submit_results)

Test_Win2003_x64 = util.BuildFactory();
Test_Win2003_x64.addStep(steps.Compile(name="test", command=["bash", scripts_root + "run_rostests", util.WithProperties('%(suffix)s'), util.WithProperties('%(buildnumber)s'), util.WithProperties('%(reason:-)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))

Test_WHS = util.BuildFactory();
Test_WHS.addStep(bs_clean)
Test_WHS.addStep(bs_git)
Test_WHS.addStep(bs_prepare_source)
Test_WHS.addStep(steps.Compile(name="rostests", command=["bash", scripts_root + "build_rostests"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["rostests"], descriptionDone=["rostests"]))
Test_WHS.addStep(steps.SetPropertyFromCommand(command=["bash", scripts_root + "get_suffix"], property="suffix"))
Test_WHS.addStep(steps.Compile(name="test", command=["bash", scripts_root + "run_rostests", util.WithProperties('%(suffix)s'), util.WithProperties('%(buildnumber)s'), util.WithProperties('%(reason:-)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))


c['builders'] = [
    util.BuilderConfig(
        name="Build GCCLin_x86",
        properties={"rosbe": "2.2-Unix", "arch": "i686"},
        workernames=["Carrier"],
        builddir="Build_GCCLin_x86",
        factory=Build_GCCLin_x86),
    util.BuilderConfig(
        name="Build GCCLin_x86 Release",
        properties={"rosbe": "2.2-Unix", "arch": "i686"},
        workernames=["Carrier"],
        builddir="Build_GCCLin_x86_Release",
        factory=Build_GCCLin_x86_Release),
    util.BuilderConfig(
        name="Build GCCWin_x86",
        properties={"rosbe": "2.2.0-Win", "arch": "i686"},
        workernames=["Carrier-Win7"],
        builddir="Build_GCCWin_x86",
        factory=Build_GCCWin_x86),
    util.BuilderConfig(
        name="Build MSVC_x86",
        properties={"rosbe": "2.2.0-Win", "arch": "i686"},
        workernames=["Carrier-Win7"],
        builddir="Build_MSVC_x86",
        factory=Build_MSVC_x86),
    util.BuilderConfig(
        name="Build MSVC_x64",
        properties={"rosbe": "2.2.0-Win", "arch": "amd64"},
        workernames=["Carrier-Win7"],
        builddir="Build_MSVC_x64",
        factory=Build_MSVC_x64),

    util.BuilderConfig(name="Test KVM", workernames=["Carrier"], builddir="Test_KVM", factory=Test_KVM),
    util.BuilderConfig(name="Test KVM_x64", workernames=["Carrier"], builddir="Test_KVM_x64", factory=Test_KVM_x64),
    #util.BuilderConfig(name="Test KVM AHK", workernames=["AHK-Bot"], builddir="Test_KVM_AHK", factory=Test_KVM_AHK),
    #util.BuilderConfig(name="Test VMW", workernames=["Fezile"], builddir="Test_VMW", factory=Test_VMW),
    #util.BuilderConfig(name="Test VMW Hybrid", workernames=["Fezile"], builddir="Test_VMW_Hybrid", factory=Test_VMW_Hybrid),
    util.BuilderConfig(name="Test Win2003_x64", workernames=["Carrier-Win2003-x64"], builddir="Test_Win2003_x64", factory=Test_Win2003_x64),
    util.BuilderConfig(name="Test WHS", workernames=["Carrier-WHS-Bot"], builddir="Test_WHS", factory=Test_WHS),
    util.BuilderConfig(name="Test VBox", workernames=["Testee"], builddir="Test_VBox", factory=Test_VBox),
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = [
    reporters.IRC(
        host="irc.freenode.net",
        port=6697,
        useSSL=True,
        nick="RosBuild",
        password=credentials.get("irc", "RosBuild_passwd"),
        channels=["#reactos", "#reactos-dev"],
        allowForce=False,
        notify_events={
            'exception': 1,
            'failure': 1
        }
    ),
#    reporters.MailNotifier(
#        fromaddr="buildbot@reactos.org",
#        sendToInterestedUsers=False,
#        extraRecipients=["ros-builds@reactos.org"],
#        mode='failing',
#        subject="%(builder)s: build failed",
#        builders=["Build GCCLin_x86", "Build GCCLin_x86 Release", "Test KVM", "Test VMW", "Test VMW Hybrid", "Build GCCWin_x86", "Build MSVC_x86", "Build MSVC2010_x86", "Test WHS", "Test VBox"],
#        smtpPassword=credentials.get("mail", "passwd"),
#        smtpUser=credentials.get("mail", "user"),
#        useTls=True,
#        relayhost="iserv.reactos.org",
#        smtpPort=587
#    ),
    reporters.GitHubStatusPush(
        token=credentials.get("github", "bbtoken")
    ),
    reporters.HttpStatusPush(
        serverUrl=credentials.get("mattermost", "webhookurl"),
        format_fn=mattermost_formatter,
    ),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['projectName'] = "ReactOS"
c['projectURL'] = "https://reactos.org/"
c['titleURL'] = "https://build.reactos.org/"
c['buildbotURL'] = "https://build.reactos.org/"

c['caches'] = {
    'Changes': 500,     # formerly c['changeCacheSize']
    'Builds': 500,      # formerly c['buildCacheSize']
}

c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

# web UI
c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
        'grid_view': True,
    },
    'auth': ReactOSLDAPAuth(),
    'authz': util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role="logged_in_developer"),
        ],
        roleMatchers=[
            util.RolesFromGroups(),
        ]
    ),
    'allowed_origins': ['https://reactos.org', 'https://*.reactos.org', 'https://developer-interface-ros.herokuapp.com'],
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
